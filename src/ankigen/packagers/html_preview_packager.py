import logging
from datetime import datetime
from typing import List
from pathlib import Path

from ankigen.models.anki_card import AnkiCard

log = logging.getLogger("rich")


class HtmlPreviewPackager:
    """
    Generates simple HTML preview files for reviewing flashcards without importing to Anki.
    Creates a clean, readable HTML dump of all cards with front/back clearly separated.
    """
    
    def __init__(self, title: str = "Flashcard Preview"):
        """
        Initialize the HTML preview packager.
        
        Args:
            title: Title to display at the top of the HTML page
        """
        self.title = title
        
    def package_preview(self, cards: List[AnkiCard], output_path: str) -> None:
        """
        Generate an HTML preview file from the given cards.
        
        Args:
            cards: List of AnkiCard objects to preview
            output_path: Path where the HTML file should be saved
        """
        if not cards:
            log.warning("No cards provided for HTML preview")
            return
            
        log.info(f"Generating HTML preview with {len(cards)} cards")
        
        # Ensure output directory exists
        output_dir = Path(output_path).parent
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # Generate HTML content
        html_content = self._generate_html(cards)
        
        # Write to file
        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(html_content)
            log.info(f"HTML preview saved to: {output_path}")
        except Exception as e:
            log.error(f"Error writing HTML preview to {output_path}: {e}")
            
    def _generate_html(self, cards: List[AnkiCard]) -> str:
        """Generate the complete HTML content for the preview."""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{self.title}</title>
    {self._get_css_styles()}
</head>
<body>
    <div class="container">
        <header>
            <h1>{self.title}</h1>
            <div class="meta">
                <span class="card-count">{len(cards)} cards</span>
                <span class="timestamp">Generated: {timestamp}</span>
            </div>
        </header>
        
        <main>
            {self._generate_cards_html(cards)}
        </main>
        
        <footer>
            <p>Generated by AnkiGen • <a href="https://github.com/anthropics/claude-code">Claude Code</a></p>
        </footer>
    </div>
</body>
</html>"""
        return html
        
    def _generate_cards_html(self, cards: List[AnkiCard]) -> str:
        """Generate HTML for all cards."""
        cards_html = []
        
        for i, card in enumerate(cards, 1):
            card_html = f"""
            <div class="card" id="card-{i}">
                <div class="card-header">
                    <span class="card-number">Card {i}</span>
                    {self._format_card_metadata(card)}
                </div>
                
                <div class="card-content">
                    <div class="card-front">
                        <h3>Front</h3>
                        <div class="question-text">{card.front_question_text}</div>
                        {self._format_front_details(card)}
                    </div>
                    
                    <div class="card-back">
                        <h3>Back</h3>
                        <div class="answer-text">{card.back_answer}</div>
                        {self._format_back_details(card)}
                    </div>
                </div>
            </div>"""
            cards_html.append(card_html)
            
        return "\n".join(cards_html)
        
    def _format_card_metadata(self, card: AnkiCard) -> str:
        """Format card metadata (type, topic, difficulty, etc.)."""
        metadata_parts = []
        
        if card.card_type:
            metadata_parts.append(f'<span class="card-type">{card.card_type}</span>')
        if card.topic:
            metadata_parts.append(f'<span class="topic">{card.topic}</span>')
        if card.subtopic:
            metadata_parts.append(f'<span class="subtopic">→ {card.subtopic}</span>')
        if card.difficulty:
            metadata_parts.append(f'<span class="difficulty difficulty-{card.difficulty.lower()}">{card.difficulty}</span>')
            
        return f'<div class="metadata">{"".join(metadata_parts)}</div>' if metadata_parts else ""
        
    def _format_front_details(self, card: AnkiCard) -> str:
        """Format additional front-side details."""
        details = []
        
        if card.front_question_context:
            details.append(f'<div class="context"><strong>Context:</strong> {card.front_question_context}</div>')
        if card.front_question_hint:
            details.append(f'<div class="hint"><strong>Hint:</strong> {card.front_question_hint}</div>')
        if card.front_question_example:
            details.append(f'<div class="example"><strong>Example:</strong> {card.front_question_example}</div>')
        if card.front_question_code:
            details.append(f'<div class="code"><strong>Code:</strong><pre>{card.front_question_code}</pre></div>')
            
        return "\n".join(details)
        
    def _format_back_details(self, card: AnkiCard) -> str:
        """Format additional back-side details."""
        details = []
        
        if card.back_explanation:
            details.append(f'<div class="explanation"><strong>Explanation:</strong> {card.back_explanation}</div>')
        if card.back_code_solution:
            details.append(f'<div class="code-solution"><strong>Code Solution:</strong><pre>{card.back_code_solution}</pre></div>')
        if card.back_related:
            related_list = ", ".join(card.back_related)
            details.append(f'<div class="related"><strong>Related:</strong> {related_list}</div>')
        if card.back_mnemonics:
            details.append(f'<div class="mnemonics"><strong>Memory Aid:</strong> {card.back_mnemonics}</div>')
        if card.tags:
            tags_html = " ".join([f'<span class="tag">{tag}</span>' for tag in card.tags])
            details.append(f'<div class="tags"><strong>Tags:</strong> {tags_html}</div>')
            
        return "\n".join(details)
        
    def _get_css_styles(self) -> str:
        """Generate CSS styles for the HTML preview."""
        return """
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f5f5f5;
        }
        
        .container {
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        
        header h1 {
            color: #2c3e50;
            margin-bottom: 10px;
        }
        
        .meta {
            display: flex;
            gap: 20px;
            color: #666;
            font-size: 14px;
        }
        
        .card {
            background: white;
            margin-bottom: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .card-header {
            background: #34495e;
            color: white;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .card-number {
            font-weight: bold;
            font-size: 16px;
        }
        
        .metadata {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        .metadata span {
            background: rgba(255,255,255,0.2);
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
        }
        
        .difficulty-easy { background-color: #27ae60 !important; }
        .difficulty-medium { background-color: #f39c12 !important; }
        .difficulty-hard { background-color: #e74c3c !important; }
        
        .card-content {
            padding: 0;
        }
        
        .card-front, .card-back {
            padding: 20px;
            border-bottom: 1px solid #eee;
        }
        
        .card-back {
            background: #f8f9fa;
            border-bottom: none;
        }
        
        .card-front h3, .card-back h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            padding-bottom: 5px;
            border-bottom: 2px solid #3498db;
            display: inline-block;
        }
        
        .question-text, .answer-text {
            font-size: 18px;
            font-weight: 500;
            margin-bottom: 15px;
            color: #2c3e50;
        }
        
        .context, .hint, .example, .explanation, .related, .mnemonics {
            margin: 10px 0;
            padding: 10px;
            background: #f1f3f4;
            border-radius: 5px;
            font-size: 14px;
        }
        
        .code, .code-solution {
            margin: 10px 0;
        }
        
        .code pre, .code-solution pre {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
            font-family: 'Monaco', 'Consolas', monospace;
            font-size: 13px;
        }
        
        .tags {
            margin-top: 15px;
        }
        
        .tag {
            background: #3498db;
            color: white;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 11px;
            margin-right: 5px;
        }
        
        footer {
            text-align: center;
            margin-top: 40px;
            padding: 20px;
            color: #666;
            font-size: 14px;
        }
        
        footer a {
            color: #3498db;
            text-decoration: none;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .metadata {
                margin-top: 10px;
            }
            
            .card-header {
                flex-direction: column;
                align-items: flex-start;
            }
        }
    </style>"""